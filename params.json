{
  "name": "Design-patterns-cookbook",
  "tagline": "Gang of four's design patterns explained with examples",
  "body": "# Design-Patterns---java \r\n\r\n## About\r\n\r\nYou can pull the entire project to retrieve every patterns examples, or simply check in the pattern folder. \r\n\r\n**Every pattern's main class (containing the main method) use this format : #name#Pattern (e.g factoryPattern)**\r\n\r\nMore pattern examples are still under development :)\r\n\r\n## What's already done ?\r\n\r\n### Creational\r\n\r\n- **Factory design pattern** : \r\n  - Creates objects without specifying the exact class to create\r\n  - *Illustrated by a RTS units creation system*\r\n- **Singleton design pattern** : \r\n  - Restricts object creation for a class to only one instance\r\n  - Using 3 different approaches (unsafe for threading, safe for threading and safe for threading using synchronized)\r\n\r\n### Structural\r\n\r\n- **Decorator pattern** : \r\n  - Dynamically adds/overrides behaviour in an existing method of an object\r\n  - Illustrated by a dessert + ingredient name and price printing\r\n  \r\n### Behavorial\r\n\r\n- **Observer pattern** : \r\n  - An object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes. Used mainly for event handling\r\n  - Illustrated by a GPS notifying display on position/precision changes\r\n\r\n## What's next ?\r\n\r\n- [ ] Examples of the main [Gang of Four's](https://en.wikipedia.org/wiki/Design_Patterns) design patterns\r\n- [ ] Populate the project's wiki with a definition & link of every design pattern (searching in packages is a pain)\r\n- [ ] Add other languages (C#, C++, you call it)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}